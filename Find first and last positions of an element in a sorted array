problem - Find first and last positions of an element in a sorted array


code --

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
      int n=nums.size();
     vector<int>vec;
      int first=-1,last=-1,count=0;
      for(int i=0;i<n;i++)
      {
        if(nums[i]==target && count<1)
        {
            first=i;
            last=i;
            count++;
        }
        else if(nums[i]==target && count>=1)
        {
           last=i;
           count++;
        }
      }
      vec.push_back(first);
      vec.push_back(last);
        return vec;
    }
};

time - O(n)

2nd binary search


 
int first(int arr[], int x, int n)
{
    int low = 0, high = n - 1, res = -1;
    while (low <= high)
    {
         
        // Normal Binary Search Logic
        int mid = (low + high) / 2;
         
        if (arr[mid] > x)
            high = mid - 1;
        else if (arr[mid] < x)
            low = mid + 1;
 
        // If arr[mid] is same as x, we
        // update res and move to the left
        // half.
        else
        {
            res = mid;
            high = mid - 1;
        }
    }
    return res;
}

int last(int arr[], int x, int n)
{
    int low = 0, high = n - 1, res = -1;
    while (low <= high)
    {
         
        // Normal Binary Search Logic
        int mid = (low + high) / 2;
         
        if (arr[mid] > x)
            high = mid - 1;
        else if (arr[mid] < x)
            low = mid + 1;
 
        // If arr[mid] is same as x, we
        // update res and move to the right
        // half.
        else
        {
            res = mid;
            low = mid + 1;
        }
    }
    return res;
}

Time Complexity : O(log n) 
Auxiliary Space : O(1) 


 
