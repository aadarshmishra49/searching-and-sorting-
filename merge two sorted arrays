problem - merge two sorted array
link -- https://leetcode.com/problems/merge-sorted-array/

code ---  1

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        
 int i = m+n-1;
    int p1 = m-1;
    int p2 = n-1;
    while(p2>=0){
        if(p1>=0 and nums1[p1]>nums2[p2]) 
            nums1[i--] = nums1[p1--];
        else
            nums1[i--] = nums2[p2--];
    }

    }
};

code - 2

void mergeArrays(int arr1[], int arr2[], int n1,
                             int n2, int arr3[])
{
    int i = 0, j = 0, k = 0;
 
    // Traverse both array
    while (i<n1 && j <n2)
    {
        // Check if current element of first
        // array is smaller than current element
        // of second array. If yes, store first
        // array element and increment first array
        // index. Otherwise do same with second array
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else
            arr3[k++] = arr2[j++];
    }
 
    // Store remaining elements of first array
    while (i < n1)
        arr3[k++] = arr1[i++];
 
    // Store remaining elements of second array
    while (j < n2)
        arr3[k++] = arr2[j++];
}


Time Complexity : O(n1 + n2) 
Auxiliary Space : O(n1 + n2)

 
 
 code 3-- without using extra space
 
 void merge(long long arr1[], long long arr2[], int n, int m) { 
          
   int i = 0, j = 0, k = n - 1;
   
    
    while (i <= k && j < m) {
        if (arr1[i] < arr2[j])
            i++;
        else {
            swap(arr2[j++], arr1[k--]);
        }
    }
   
    
    sort(arr1, arr1 + n);
   
    
    sort(arr2, arr2 + m);

        } 
        
        
        
 code 4 using gap method
 
 int nextGap(int gap)
{
    if (gap <= 1)
        return 0;
    return (gap / 2) + (gap % 2);
}
	void merge(int arr1[], int arr2[], int n, int m) {
	   
	     int i, j, gap = n + m;
    for (gap = nextGap(gap); gap > 0; gap = nextGap(gap))
    {
        // comparing elements in the first array.
        for (i = 0; i + gap < n; i++)
            if (arr1[i] > arr1[i + gap])
                swap(arr1[i], arr1[i + gap]);
 
        // comparing elements in both arrays.
        for (j = gap > n ? gap - n : 0;
             i < n && j < m;
             i++, j++)
            if (arr1[i] > arr2[j])
                swap(arr1[i], arr2[j]);
 
        if (j < m) {
            // comparing elements in the second array.
            for (j = 0; j + gap < m; j++)
                if (arr2[j] > arr2[j + gap])
                    swap(arr2[j], arr2[j + gap]);
        }
    }
	}
 
 
 
